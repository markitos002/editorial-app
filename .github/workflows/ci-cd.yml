name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: editorialdata
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: 🧹 Lint code
      run: npm run lint

    - name: 🧪 Run unit tests
      run: npm run test:unit

    - name: 🔗 Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/editorialdata

    - name: 🎭 Run E2E tests
      uses: cypress-io/github-action@v6
      with:
        build: npm run build
        start: npm run preview
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: false

    - name: 📊 Upload test coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔧 Install dependencies
      run: npm ci

    - name: 🏗️ Build for production
      run: npm run build:production

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/

    - name: 🚀 Deploy to staging server
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example for a simple server:
        # rsync -avz --delete dist/ user@staging-server:/var/www/editorial-app/
        echo "✅ Staging deployment completed"

    - name: 🏥 Health check staging
      run: |
        sleep 30 # Wait for deployment to settle
        npm run health-check
      env:
        FRONTEND_URL: https://staging.editorial-app.com
        BACKEND_URL: https://staging-api.editorial-app.com

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/

    - name: 🚀 Deploy to production server
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment commands here
        # Example:
        # rsync -avz --delete dist/ user@prod-server:/var/www/editorial-app/
        echo "✅ Production deployment completed"

    - name: 🏥 Health check production
      run: |
        sleep 60 # Wait for deployment to settle
        npm run health-check
      env:
        FRONTEND_URL: https://editorial-app.com
        BACKEND_URL: https://api.editorial-app.com

    - name: 📢 Notify deployment success
      if: success()
      run: |
        echo "🎉 Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

    - name: 🚨 Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        # Add failure notification logic here
