// test-complete-revision-system.js - Script completo para probar todo el sistema de revisi√≥n
const axios = require('axios');

const API_URL = 'http://localhost:4000/api';

// Funci√≥n para hacer login y obtener token
async function obtenerToken(email, contrasena, descripcion) {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, {
      email: email,
      contrasena: contrasena
    });
    
    if (response.data.token) {
      console.log(`‚úÖ Login exitoso como ${descripcion}: ${response.data.usuario.nombre} (${response.data.usuario.rol})`);
      return {
        token: response.data.token,
        usuario: response.data.usuario
      };
    } else {
      console.log(`‚ùå Error en login ${descripcion}: No se recibi√≥ token`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå Error en login ${descripcion}:`, error.response?.data?.mensaje || error.message);
    return null;
  }
}

// Funci√≥n principal de testing
async function probarSistemaCompleto() {
  console.log('üß™ PROBANDO SISTEMA COMPLETO DE REVISI√ìN DE DOCUMENTOS');
  console.log('='.repeat(60));
  
  // 1. LOGIN COMO EDITOR (para verificar asignaciones)
  console.log('\nüìù FASE 1: VERIFICANDO SISTEMA DE ASIGNACIONES');
  console.log('-'.repeat(40));
  
  const editorAuth = await obtenerToken('admin@editorial.com', 'admin123', 'Editor');
  if (!editorAuth) {
    console.log('‚ùå No se pudo obtener token de editor, terminando prueba');
    return;
  }

  const editorHeaders = {
    'Authorization': `Bearer ${editorAuth.token}`,
    'Content-Type': 'application/json'
  };

  // Verificar asignaciones existentes
  try {
    console.log('\nüìã Verificando asignaciones existentes...');
    const response = await axios.get(`${API_URL}/asignaciones/activas`, { headers: editorHeaders });
    
    if (response.data.success) {
      console.log(`‚úÖ Asignaciones activas: ${response.data.data.length}`);
      response.data.data.forEach((asignacion, index) => {
        console.log(`   ${index + 1}. "${asignacion.titulo}" ‚Üí ${asignacion.revisor_nombre}`);
        console.log(`      Estado: ${asignacion.estado} | Asignado: ${new Date(asignacion.fecha_asignacion).toLocaleDateString()}`);
      });
    } else {
      console.log('‚ùå Error al obtener asignaciones:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al obtener asignaciones:', error.response?.data?.mensaje || error.message);
  }

  // 2. LOGIN COMO REVISOR
  console.log('\nüìù FASE 2: PROBANDO SISTEMA DE REVISI√ìN COMO REVISOR');
  console.log('-'.repeat(40));
  
  const revisorAuth = await obtenerToken('test-revisor@editorial.com', 'test123', 'Revisor');
  if (!revisorAuth) {
    console.log('‚ùå No se pudo obtener token de revisor, terminando prueba de revisi√≥n');
    return;
  }

  const revisorHeaders = {
    'Authorization': `Bearer ${revisorAuth.token}`,
    'Content-Type': 'application/json'
  };

  // 2.1 Obtener revisiones asignadas
  let primeraRevision = null;
  try {
    console.log('\nüìã Obteniendo revisiones asignadas al revisor...');
    const response = await axios.get(`${API_URL}/revision-documentos/mis-revisiones`, { headers: revisorHeaders });
    
    if (response.data.success) {
      console.log(`‚úÖ Revisiones asignadas: ${response.data.data.length}`);
      response.data.data.forEach((revision, index) => {
        console.log(`   ${index + 1}. "${revision.titulo}" - Estado: ${revision.revision_estado}`);
        console.log(`      - Autor: ${revision.autor_nombre}`);
        console.log(`      - Archivo: ${revision.archivo_nombre || 'Sin archivo'}`);
        console.log(`      - Asignado: ${new Date(revision.fecha_asignacion).toLocaleDateString()}`);
        
        if (index === 0) {
          primeraRevision = revision;
        }
      });
    } else {
      console.log('‚ùå Error:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al obtener revisiones:', error.response?.data?.mensaje || error.message);
  }

  if (!primeraRevision) {
    console.log('‚ö†Ô∏è  No hay revisiones asignadas para probar el flujo completo');
    return;
  }

  console.log(`\nüîñ Usando revisi√≥n ID ${primeraRevision.revision_id} para pruebas detalladas`);

  // 2.2 Obtener detalles de revisi√≥n
  try {
    console.log('\nüìÑ Obteniendo detalles de la revisi√≥n...');
    const response = await axios.get(
      `${API_URL}/revision-documentos/revision/${primeraRevision.revision_id}`, 
      { headers: revisorHeaders }
    );
    
    if (response.data.success) {
      const revision = response.data.data;
      console.log('‚úÖ Detalles obtenidos:');
      console.log(`   - Art√≠culo: "${revision.titulo}"`);
      console.log(`   - Autor: ${revision.autor_nombre} (${revision.autor_email})`);
      console.log(`   - Estado: ${revision.estado}`);
      console.log(`   - Archivo: ${revision.archivo_nombre} (${(revision.archivo_size / 1024).toFixed(1)} KB)`);
      console.log(`   - Observaciones actuales: ${revision.observaciones || 'Ninguna'}`);
      console.log(`   - Calificaci√≥n actual: ${revision.calificacion || 'Sin calificar'}`);
    } else {
      console.log('‚ùå Error:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al obtener detalles:', error.response?.data?.mensaje || error.message);
  }

  // 2.3 Guardar progreso
  try {
    console.log('\nüíæ Probando guardar progreso de revisi√≥n...');
    const nuevasObservaciones = `Revisi√≥n actualizada ${new Date().toLocaleString()}: El art√≠culo presenta una metodolog√≠a s√≥lida. Se recomienda ampliar la secci√≥n de resultados y mejorar las conclusiones. La estructura general es adecuada pero necesita mayor precisi√≥n en las referencias bibliogr√°ficas.`;
    
    const response = await axios.put(
      `${API_URL}/revision-documentos/revision/${primeraRevision.revision_id}/progreso`,
      {
        observaciones: nuevasObservaciones,
        calificacion: 7
      },
      { headers: revisorHeaders }
    );
    
    if (response.data.success) {
      console.log('‚úÖ Progreso guardado exitosamente');
      console.log('   - Nuevas observaciones guardadas');
      console.log('   - Calificaci√≥n actualizada: 7/10');
    } else {
      console.log('‚ùå Error:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al guardar progreso:', error.response?.data?.mensaje || error.message);
  }

  // 2.4 Verificar que el progreso se guard√≥
  try {
    console.log('\nüîç Verificando que el progreso se guard√≥ correctamente...');
    const response = await axios.get(
      `${API_URL}/revision-documentos/revision/${primeraRevision.revision_id}`, 
      { headers: revisorHeaders }
    );
    
    if (response.data.success) {
      const revision = response.data.data;
      console.log('‚úÖ Progreso verificado:');
      console.log(`   - Calificaci√≥n: ${revision.calificacion}/10`);
      console.log(`   - Observaciones actualizadas: ${revision.observaciones ? 'S√≠' : 'No'}`);
      console.log(`   - √öltima actualizaci√≥n: ${new Date(revision.fecha_actualizacion).toLocaleString()}`);
    } else {
      console.log('‚ùå Error al verificar:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al verificar progreso:', error.response?.data?.mensaje || error.message);
  }

  // 2.5 Obtener historial de comentarios
  try {
    console.log('\nüí¨ Obteniendo historial de comentarios...');
    const response = await axios.get(
      `${API_URL}/revision-documentos/revision/${primeraRevision.revision_id}/comentarios`,
      { headers: revisorHeaders }
    );
    
    if (response.data.success) {
      console.log('‚úÖ Historial obtenido:');
      console.log(`   - Comentarios p√∫blicos: ${response.data.data.comentarios_publicos ? 'Disponibles' : 'Ninguno'}`);
      console.log(`   - √öltima actualizaci√≥n: ${new Date(response.data.data.ultima_actualizacion).toLocaleString()}`);
    } else {
      console.log('‚ùå Error:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al obtener historial:', error.response?.data?.mensaje || error.message);
  }

  // 2.6 Probar completar revisi√≥n
  try {
    console.log('\n‚úÖ Probando completar revisi√≥n...');
    const response = await axios.put(
      `${API_URL}/revision-documentos/revision/${primeraRevision.revision_id}/completar`,
      {
        observaciones: 'REVISI√ìN FINAL: El art√≠culo es de buena calidad y cumple con los est√°ndares acad√©micos. Se recomienda su aceptaci√≥n con cambios menores en la metodolog√≠a.',
        calificacion: 8,
        recomendacion: 'aceptar',
        observaciones_privadas: 'El autor ha demostrado un buen manejo del tema. Recomiendo su publicaci√≥n.'
      },
      { headers: revisorHeaders }
    );
    
    if (response.data.success) {
      console.log('‚úÖ Revisi√≥n completada exitosamente');
      console.log('   - Estado cambiado a: completada');
      console.log('   - Calificaci√≥n final: 8/10');
      console.log('   - Recomendaci√≥n: Aceptar');
    } else {
      console.log('‚ùå Error:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al completar revisi√≥n:', error.response?.data?.mensaje || error.message);
  }

  // 2.7 Verificar estado final
  try {
    console.log('\nüîç Verificando estado final de la revisi√≥n...');
    const response = await axios.get(
      `${API_URL}/revision-documentos/revision/${primeraRevision.revision_id}`, 
      { headers: revisorHeaders }
    );
    
    if (response.data.success) {
      const revision = response.data.data;
      console.log('‚úÖ Estado final verificado:');
      console.log(`   - Estado: ${revision.estado}`);
      console.log(`   - Calificaci√≥n final: ${revision.calificacion}/10`);
      console.log(`   - Fecha de finalizaci√≥n: ${new Date(revision.fecha_actualizacion).toLocaleString()}`);
    } else {
      console.log('‚ùå Error al verificar estado final:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al verificar estado final:', error.response?.data?.mensaje || error.message);
  }

  // 3. RESUMEN FINAL
  console.log('\nüìä RESUMEN FINAL DEL TESTING');
  console.log('='.repeat(40));
  console.log('‚úÖ Sistema de autenticaci√≥n: FUNCIONANDO');
  console.log('‚úÖ APIs de revisi√≥n de documentos: FUNCIONANDO');
  console.log('‚úÖ Flujo completo de revisi√≥n: FUNCIONANDO');
  console.log('‚úÖ Guardado de progreso: FUNCIONANDO');
  console.log('‚úÖ Completar revisi√≥n: FUNCIONANDO');
  console.log('\nüéâ SISTEMA DE REVISI√ìN DE DOCUMENTOS COMPLETAMENTE OPERATIVO');
  
  console.log('\nüìù PR√ìXIMOS PASOS SUGERIDOS:');
  console.log('1. Probar la interfaz web en http://localhost:5173');
  console.log('2. Hacer login como revisor: test-revisor@editorial.com / test123');
  console.log('3. Navegar a "Mis Revisiones" en el men√∫');
  console.log('4. Probar el flujo completo de revisi√≥n en la interfaz');
}

// Ejecutar las pruebas
probarSistemaCompleto().catch(console.error);
