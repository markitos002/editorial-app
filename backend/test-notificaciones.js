// test-notificaciones.js - Script de prueba para el sistema de notificaciones
const axios = require('axios');

const BASE_URL = 'http://localhost:4000/api';
let token = '';
let userId = '';

// Helper para hacer peticiones autenticadas
const api = axios.create({
  baseURL: BASE_URL
});

// Interceptor para a√±adir token autom√°ticamente
api.interceptors.request.use((config) => {
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

async function login() {
  try {
    console.log('üîê Iniciando sesi√≥n como admin...');
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@editorial.com',
      contrasena: 'admin123'
    });
    
    token = response.data.token;
    userId = response.data.usuario.id;
    console.log('‚úÖ Login exitoso');
    console.log(`üìã Usuario ID: ${userId}`);
    
  } catch (error) {
    console.error('‚ùå Error al hacer login:', error.response?.data || error.message);
    process.exit(1);
  }
}

async function probarCrearNotificacion() {
  try {
    console.log('\nüìù Probando crear notificaci√≥n...');
    
    const response = await api.post('/notificaciones', {
      usuario_id: userId,
      titulo: 'Notificaci√≥n de prueba',
      mensaje: 'Esta es una notificaci√≥n de prueba del sistema',
      tipo: 'info'
    });
    
    console.log('‚úÖ Notificaci√≥n creada exitosamente:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data.notificacion.id;
    
  } catch (error) {
    console.error('‚ùå Error al crear notificaci√≥n:', error.response?.data || error.message);
  }
}

async function probarObtenerNotificacionesPorUsuario() {
  try {
    console.log('\nüìã Probando obtener notificaciones del usuario...');
    
    const response = await api.get(`/notificaciones/usuario/${userId}`);
    
    console.log('‚úÖ Notificaciones del usuario obtenidas:');
    console.log(`üìä Total: ${response.data.total_notificaciones}`);
    console.log(`üîî No le√≠das: ${response.data.notificaciones_no_leidas}`);
    console.log('\nüìù Lista de notificaciones:');
    response.data.notificaciones.forEach((notif, index) => {
      console.log(`${index + 1}. [${notif.leida ? '‚úÖ' : 'üîî'}] ${notif.titulo}: ${notif.mensaje}`);
      console.log(`   üìÖ ${new Date(notif.fecha_creacion).toLocaleString('es-ES')}`);
    });
    
  } catch (error) {
    console.error('‚ùå Error al obtener notificaciones:', error.response?.data || error.message);
  }
}

async function probarMarcarComoLeida(notificacionId) {
  try {
    console.log(`\n‚úÖ Probando marcar notificaci√≥n ${notificacionId} como le√≠da...`);
    
    const response = await api.patch(`/notificaciones/${notificacionId}/marcar-leida`);
    
    console.log('‚úÖ Notificaci√≥n marcada como le√≠da:');
    console.log(`üìù ${response.data.notificacion.titulo}: ${response.data.notificacion.mensaje}`);
    console.log(`üìä Estado: ${response.data.notificacion.leida ? 'Le√≠da' : 'No le√≠da'}`);
    
  } catch (error) {
    console.error('‚ùå Error al marcar como le√≠da:', error.response?.data || error.message);
  }
}

async function probarMarcarTodasComoLeidas() {
  try {
    console.log('\n‚úÖ Probando marcar todas las notificaciones como le√≠das...');
    
    const response = await api.patch(`/notificaciones/usuario/${userId}/marcar-todas-leidas`);
    
    console.log('‚úÖ Resultado:');
    console.log(`üìä ${response.data.mensaje}`);
    console.log(`üî¢ Notificaciones actualizadas: ${response.data.notificaciones_actualizadas}`);
    
  } catch (error) {
    console.error('‚ùå Error al marcar todas como le√≠das:', error.response?.data || error.message);
  }
}

async function probarCrearNotificacionesEjemplo() {
  try {
    console.log('\nüß™ Creando notificaciones de ejemplo...');
    
    const notificacionesEjemplo = [
      {
        usuario_id: userId,
        titulo: 'Nueva asignaci√≥n disponible',
        mensaje: 'Se te ha asignado revisar el art√≠culo "Cuidados paliativos en UCI"',
        tipo: 'info'
      },
      {
        usuario_id: userId,
        titulo: 'Comentario recibido',
        mensaje: 'El autor ha respondido a tus observaciones',
        tipo: 'info'
      },
      {
        usuario_id: userId,
        titulo: 'Revisi√≥n completada',
        mensaje: 'Tu art√≠culo ha sido aprobado para publicaci√≥n',
        tipo: 'success'
      }
    ];
    
    for (const notif of notificacionesEjemplo) {
      await api.post('/notificaciones', notif);
      console.log(`‚úÖ Creada: ${notif.mensaje.substring(0, 50)}...`);
    }
    
    console.log('‚úÖ Todas las notificaciones de ejemplo creadas');
    
  } catch (error) {
    console.error('‚ùå Error al crear notificaciones de ejemplo:', error.response?.data || error.message);
  }
}

async function probarObtenerTodasLasNotificaciones() {
  try {
    console.log('\nüìã Probando obtener todas las notificaciones (admin)...');
    
    const response = await api.get('/notificaciones');
    
    console.log('‚úÖ Todas las notificaciones obtenidas:');
    console.log(`üìä Total encontradas: ${response.data.notificaciones.length}`);
    console.log('\nüìù Lista completa:');
    response.data.notificaciones.forEach((notif, index) => {
      console.log(`${index + 1}. [${notif.leida ? '‚úÖ' : 'üîî'}] Usuario: ${notif.usuario_nombre}`);
      console.log(`   üí¨ ${notif.titulo}: ${notif.mensaje}`);
      console.log(`   üìÖ ${new Date(notif.fecha_creacion).toLocaleString('es-ES')}\n`);
    });
    
  } catch (error) {
    console.error('‚ùå Error al obtener todas las notificaciones:', error.response?.data || error.message);
  }
}

async function ejecutarPruebas() {
  try {
    console.log('üîî === PRUEBAS DEL SISTEMA DE NOTIFICACIONES ===\n');
    
    // 1. Login
    await login();
    
    // 2. Crear notificaciones de ejemplo
    await probarCrearNotificacionesEjemplo();
    
    // 3. Obtener notificaciones del usuario
    await probarObtenerNotificacionesPorUsuario();
    
    // 4. Crear una notificaci√≥n espec√≠fica
    const notifId = await probarCrearNotificacion();
    
    // 5. Marcar como le√≠da
    if (notifId) {
      await probarMarcarComoLeida(notifId);
    }
    
    // 6. Obtener todas las notificaciones (admin)
    await probarObtenerTodasLasNotificaciones();
    
    // 7. Marcar todas como le√≠das
    await probarMarcarTodasComoLeidas();
    
    // 8. Verificar cambios
    await probarObtenerNotificacionesPorUsuario();
    
    console.log('\n‚úÖ === TODAS LAS PRUEBAS COMPLETADAS ===');
    
  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
  }
}

// Ejecutar las pruebas
ejecutarPruebas();
