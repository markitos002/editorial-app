// Script para probar los endpoints de Art√≠culos
// Ejecutar con: node test-articulos.js

const BASE_URL = 'http://localhost:4000';
const API_URL = `${BASE_URL}/api`;

async function testArticulosAPI() {
  console.log('üöÄ Iniciando pruebas de la API de Art√≠culos...\n');

  try {
    // Test 1: Verificar que el servidor est√© funcionando
    console.log('1. Verificando conexi√≥n al servidor...');
    const connectionTest = await fetch(BASE_URL);
    const connectionResponse = await connectionTest.text();
    console.log(`‚úÖ Servidor responde: ${connectionResponse}\n`);

    // Test 2: Crear un usuario autor para las pruebas
    console.log('2. Creando usuario autor para pruebas...');
    const nuevoAutor = {
      nombre: "Dr. Juan Investigador",
      email: `autor${Date.now()}@universidad.com`,
      contrasena: "password123",
      rol: "autor"
    };

    const autorResponse = await fetch(`${API_URL}/usuarios`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(nuevoAutor)
    });

    const autorCreado = await autorResponse.json();
    console.log(`‚úÖ Autor creado con ID: ${autorCreado.id}\n`);
    const autorId = autorCreado.id;

    // Test 3: Obtener todos los art√≠culos (inicialmente vac√≠o)
    console.log('3. Obteniendo todos los art√≠culos...');
    const articulosResponse = await fetch(`${API_URL}/articulos`);
    const articulosData = await articulosResponse.json();
    console.log(`‚úÖ Art√≠culos encontrados: ${articulosData.articulos.length}`);
    console.log('Paginaci√≥n:', articulosData.pagination);
    console.log('');

    // Test 4: Crear un nuevo art√≠culo
    console.log('4. Creando nuevo art√≠culo...');
    const nuevoArticulo = {
      titulo: "Avances en Machine Learning",
      resumen: "Un an√°lisis detallado de los √∫ltimos avances en algoritmos de aprendizaje autom√°tico.",
      contenido: "El machine learning ha experimentado avances significativos en los √∫ltimos a√±os. Los modelos de deep learning, especialmente los transformers, han revolucionado el procesamiento de lenguaje natural. Este art√≠culo examina las tendencias actuales, incluyendo GPT, BERT y otros modelos de vanguardia. Tambi√©n se discuten las implicaciones √©ticas y los desaf√≠os futuros en el campo.",
      autor_id: autorId
    };

    const crearResponse = await fetch(`${API_URL}/articulos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(nuevoArticulo)
    });

    const articuloCreado = await crearResponse.json();
    console.log('‚úÖ Art√≠culo creado:');
    console.log(`   ID: ${articuloCreado.id}`);
    console.log(`   T√≠tulo: ${articuloCreado.titulo}`);
    console.log(`   Estado: ${articuloCreado.estado}`);
    console.log(`   Autor: ${articuloCreado.autor_nombre}\n`);

    const articuloId = articuloCreado.id;

    // Test 5: Obtener art√≠culo por ID
    console.log(`5. Obteniendo art√≠culo con ID ${articuloId}...`);
    const articuloPorIdResponse = await fetch(`${API_URL}/articulos/${articuloId}`);
    const articuloData = await articuloPorIdResponse.json();
    console.log('‚úÖ Art√≠culo encontrado:');
    console.log(`   T√≠tulo: ${articuloData.titulo}`);
    console.log(`   Resumen: ${articuloData.resumen.substring(0, 50)}...`);
    console.log('');

    // Test 6: Actualizar art√≠culo
    console.log(`6. Actualizando art√≠culo con ID ${articuloId}...`);
    const actualizacion = {
      titulo: "Avances en Machine Learning - Edici√≥n 2025",
      estado: "en_revision"
    };

    const actualizarResponse = await fetch(`${API_URL}/articulos/${articuloId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(actualizacion)
    });

    const articuloActualizado = await actualizarResponse.json();
    console.log('‚úÖ Art√≠culo actualizado:');
    console.log('   Respuesta completa:', JSON.stringify(articuloActualizado, null, 2));
    console.log(`   Nuevo t√≠tulo: ${articuloActualizado.titulo || 'undefined'}`);
    console.log(`   Nuevo estado: ${articuloActualizado.estado || 'undefined'}\n`);

    // Test 7: Cambiar estado del art√≠culo
    console.log(`7. Cambiando estado del art√≠culo a 'aprobado'...`);
    const cambioEstado = {
      estado: "aprobado",
      observaciones: "Art√≠culo bien estructurado y actualizado. Aprobado para publicaci√≥n."
    };

    const estadoResponse = await fetch(`${API_URL}/articulos/${articuloId}/estado`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(cambioEstado)
    });

    const estadoResult = await estadoResponse.json();
    console.log('‚úÖ Estado cambiado:');
    console.log('   Respuesta completa:', JSON.stringify(estadoResult, null, 2));
    console.log(`   Mensaje: ${estadoResult.mensaje || 'Sin mensaje'}`);
    if (estadoResult.articulo) {
      console.log(`   Nuevo estado: ${estadoResult.articulo.estado || 'undefined'}\n`);
    } else {
      console.log('   ‚ùå No se encontr√≥ el objeto art√≠culo en la respuesta\n');
    }

    // Test 8: Crear segundo art√≠culo para pruebas de filtros
    console.log('8. Creando segundo art√≠culo para pruebas...');
    const segundoArticulo = {
      titulo: "Sostenibilidad Digital",
      resumen: "Estrategias para reducir el impacto ambiental de las tecnolog√≠as digitales.",
      contenido: "La sostenibilidad digital es un tema crucial en la era actual. Este art√≠culo explora metodolog√≠as para reducir el consumo energ√©tico de los sistemas digitales.",
      autor_id: autorId
    };

    const segundo = await fetch(`${API_URL}/articulos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(segundoArticulo)
    });

    const segundoCreado = await segundo.json();
    console.log(`‚úÖ Segundo art√≠culo creado con ID: ${segundoCreado.id}\n`);

    // Test 9: Filtrar art√≠culos por estado
    console.log('9. Filtrando art√≠culos por estado "aprobado"...');
    const filtroResponse = await fetch(`${API_URL}/articulos?estado=aprobado`);
    const articulosFiltrados = await filtroResponse.json();
    console.log(`‚úÖ Art√≠culos aprobados encontrados: ${articulosFiltrados.articulos.length}\n`);

    // Test 10: Filtrar art√≠culos por autor
    console.log(`10. Filtrando art√≠culos por autor ID ${autorId}...`);
    const autorFiltroResponse = await fetch(`${API_URL}/articulos?autor_id=${autorId}`);
    const articulosAutor = await autorFiltroResponse.json();
    console.log(`‚úÖ Art√≠culos del autor encontrados: ${articulosAutor.articulos.length}\n`);

    // Test 11: Probar paginaci√≥n
    console.log('11. Probando paginaci√≥n (limit=1)...');
    const paginacionResponse = await fetch(`${API_URL}/articulos?limit=1&page=1`);
    const articulosPaginados = await paginacionResponse.json();
    console.log('‚úÖ Paginaci√≥n funcionando:');
    console.log(`   Art√≠culos en p√°gina: ${articulosPaginados.articulos.length}`);
    console.log(`   Total p√°ginas: ${articulosPaginados.pagination.total_pages}`);
    console.log(`   Total art√≠culos: ${articulosPaginados.pagination.total_count}\n`);

    // Test 12: Eliminar art√≠culo
    console.log(`12. Eliminando segundo art√≠culo (ID ${segundoCreado.id})...`);
    const eliminarResponse = await fetch(`${API_URL}/articulos/${segundoCreado.id}`, {
      method: 'DELETE'
    });

    const eliminado = await eliminarResponse.json();
    console.log('‚úÖ Art√≠culo eliminado:');
    console.log(`   Mensaje: ${eliminado.mensaje}\n`);

    // Test 13: Verificar que el art√≠culo fue eliminado
    console.log(`13. Verificando art√≠culo eliminado (ID ${segundoCreado.id})...`);
    const verificarResponse = await fetch(`${API_URL}/articulos/${segundoCreado.id}`);
    
    if (verificarResponse.status === 404) {
      const errorData = await verificarResponse.json();
      console.log('‚úÖ Error 404 esperado:');
      console.log(`   Mensaje: ${errorData.mensaje}\n`);
    }

    // Test 14: Probar validaciones - art√≠culo sin campos requeridos
    console.log('14. Probando validaciones (art√≠culo incompleto)...');
    const articuloIncompleto = { titulo: "Solo t√≠tulo" };
    
    const validacionResponse = await fetch(`${API_URL}/articulos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(articuloIncompleto)
    });

    if (validacionResponse.status === 400) {
      const errorValidacion = await validacionResponse.json();
      console.log('‚úÖ Validaci√≥n funcionando:');
      console.log(`   Error: ${errorValidacion.mensaje}\n`);
    }

    // Limpiar datos de prueba
    console.log('15. Limpiando datos de prueba...');
    await fetch(`${API_URL}/articulos/${articuloId}`, { method: 'DELETE' });
    await fetch(`${API_URL}/usuarios/${autorId}`, { method: 'DELETE' });
    console.log('‚úÖ Datos de prueba eliminados\n');

    console.log('üéâ ¬°Todas las pruebas de art√≠culos completadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.message);
    console.log('\nüí° Aseg√∫rate de que:');
    console.log('   - El servidor backend est√© corriendo (npm run dev)');
    console.log('   - La base de datos est√© conectada');
    console.log('   - Las tablas usuarios y articulos existan');
  }
}

// Ejecutar las pruebas
testArticulosAPI();
