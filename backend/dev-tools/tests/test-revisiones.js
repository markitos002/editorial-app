// test-revisiones.js
const API_URL = 'http://localhost:4000/api';

async function testRevisionesAPI() {
  console.log('üöÄ Iniciando pruebas de la API de Revisiones...\n');

  try {
    let autorId, revisorId, editorId, articuloId, revisionId;

    // Test 1: Verificar que el servidor est√© funcionando
    console.log('1. Verificando conexi√≥n al servidor...');
    const serverResponse = await fetch(`${API_URL.replace('/api', '')}/`);
    const serverMessage = await serverResponse.text();
    console.log(`‚úÖ Servidor responde: ${serverMessage}\n`);

    // Test 2: Crear usuarios de prueba (autor, revisor, editor)
    console.log('2. Creando usuarios de prueba...');
    
    // Crear autor
    const autor = {
      nombre: 'Dr. Mar√≠a Autora',
      email: `autor_${Date.now()}@universidad.com`,
      contrasena: 'password123',
      rol: 'autor'
    };
    
    const autorResponse = await fetch(`${API_URL}/usuarios`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(autor)
    });
    const autorCreado = await autorResponse.json();
    autorId = autorCreado.id;
    console.log(`‚úÖ Autor creado con ID: ${autorId}`);

    // Crear revisor
    const revisor = {
      nombre: 'Dr. Carlos Revisor',
      email: `revisor_${Date.now()}@universidad.com`,
      contrasena: 'password123',
      rol: 'revisor'
    };
    
    const revisorResponse = await fetch(`${API_URL}/usuarios`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(revisor)
    });
    const revisorCreado = await revisorResponse.json();
    revisorId = revisorCreado.id;
    console.log(`‚úÖ Revisor creado con ID: ${revisorId}`);

    // Crear editor
    const editor = {
      nombre: 'Dra. Ana Editora',
      email: `editor_${Date.now()}@editorial.com`,
      contrasena: 'password123',
      rol: 'editor'
    };
    
    const editorResponse = await fetch(`${API_URL}/usuarios`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(editor)
    });
    const editorCreado = await editorResponse.json();
    editorId = editorCreado.id;
    console.log(`‚úÖ Editor creado con ID: ${editorId}\n`);

    // Test 3: Crear art√≠culo para las revisiones
    console.log('3. Creando art√≠culo para revisar...');
    const articulo = {
      titulo: 'Inteligencia Artificial en Medicina',
      resumen: 'Un estudio comprehensivo sobre las aplicaciones de IA en el diagn√≥stico m√©dico y tratamiento de enfermedades complejas.',
      contenido: 'La inteligencia artificial est√° revolucionando el campo de la medicina. Este art√≠culo explora las diversas aplicaciones de IA en diagn√≥stico m√©dico, desde la interpretaci√≥n de im√°genes radiol√≥gicas hasta el an√°lisis de datos gen√≥micos. Se presentan casos de estudio y se discuten los desaf√≠os √©ticos y t√©cnicos.',
      autor_id: autorId
    };

    const articuloResponse = await fetch(`${API_URL}/articulos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(articulo)
    });

    const articuloCreado = await articuloResponse.json();
    articuloId = articuloCreado.id;
    console.log(`‚úÖ Art√≠culo creado con ID: ${articuloId}`);
    console.log(`   T√≠tulo: ${articuloCreado.titulo}\n`);

    // Test 4: Obtener todas las revisiones (deber√≠a estar vac√≠o inicialmente)
    console.log('4. Obteniendo todas las revisiones...');
    const revisionesResponse = await fetch(`${API_URL}/revisiones`);
    const revisionesData = await revisionesResponse.json();
    console.log(`‚úÖ Revisiones encontradas: ${revisionesData.revisiones.length}`);
    console.log(`Paginaci√≥n: ${JSON.stringify(revisionesData.pagination)}\n`);

    // Test 5: Crear primera revisi√≥n
    console.log(`5. Creando revisi√≥n del revisor...`);
    const revision1 = {
      articulo_id: articuloId,
      revisor_id: revisorId,
      observaciones: 'El art√≠culo est√° bien estructurado y presenta informaci√≥n valiosa. Sin embargo, sugiero ampliar la secci√≥n de metodolog√≠a y agregar m√°s referencias a estudios recientes sobre √©tica en IA m√©dica.',
      recomendacion: 'revisar'
    };

    const revision1Response = await fetch(`${API_URL}/revisiones`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(revision1)
    });

    const revision1Creada = await revision1Response.json();
    revisionId = revision1Creada.revision.id;
    console.log(`‚úÖ Revisi√≥n creada con ID: ${revisionId}`);
    console.log(`   Revisor: ${revision1Creada.revision.revisor_nombre}`);
    console.log(`   Recomendaci√≥n: ${revision1Creada.revision.recomendacion}\n`);

    // Test 6: Crear segunda revisi√≥n (del editor)
    console.log(`6. Creando revisi√≥n del editor...`);
    const revision2 = {
      articulo_id: articuloId,
      revisor_id: editorId,
      observaciones: 'Excelente trabajo. El art√≠culo cumple con los est√°ndares de calidad de la revista. Las referencias son actuales y la metodolog√≠a es s√≥lida. Recomiendo su publicaci√≥n.',
      recomendacion: 'aceptar'
    };

    const revision2Response = await fetch(`${API_URL}/revisiones`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(revision2)
    });

    const revision2Creada = await revision2Response.json();
    console.log(`‚úÖ Segunda revisi√≥n creada con ID: ${revision2Creada.revision.id}`);
    console.log(`   Editor: ${revision2Creada.revision.revisor_nombre}`);
    console.log(`   Recomendaci√≥n: ${revision2Creada.revision.recomendacion}\n`);

    // Test 7: Obtener revisi√≥n espec√≠fica por ID
    console.log(`7. Obteniendo revisi√≥n con ID ${revisionId}...`);
    const revisionPorIdResponse = await fetch(`${API_URL}/revisiones/${revisionId}`);
    const revisionData = await revisionPorIdResponse.json();
    console.log('‚úÖ Revisi√≥n encontrada:');
    console.log(`   Art√≠culo: ${revisionData.articulo_titulo}`);
    console.log(`   Revisor: ${revisionData.revisor_nombre}`);
    console.log(`   Observaciones: ${revisionData.observaciones.substring(0, 80)}...\n`);

    // Test 8: Actualizar revisi√≥n
    console.log(`8. Actualizando revisi√≥n con ID ${revisionId}...`);
    const actualizacion = {
      observaciones: 'REVISI√ìN ACTUALIZADA: El art√≠culo presenta informaci√≥n valiosa y est√° bien estructurado. He revisado las referencias y son apropiadas. Sugiero peque√±os ajustes en la conclusi√≥n para mayor claridad.',
      recomendacion: 'aceptar'
    };

    const actualizarResponse = await fetch(`${API_URL}/revisiones/${revisionId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(actualizacion)
    });

    const revisionActualizada = await actualizarResponse.json();
    console.log('‚úÖ Revisi√≥n actualizada:');
    console.log(`   Nueva recomendaci√≥n: ${revisionActualizada.revision.recomendacion}`);
    console.log(`   Observaciones: ${revisionActualizada.revision.observaciones.substring(0, 50)}...\n`);

    // Test 9: Obtener revisiones de un art√≠culo espec√≠fico
    console.log(`9. Obteniendo revisiones del art√≠culo ${articuloId}...`);
    const revisionesArticuloResponse = await fetch(`${API_URL}/revisiones/articulo/${articuloId}`);
    const revisionesArticulo = await revisionesArticuloResponse.json();
    console.log(`‚úÖ Revisiones del art√≠culo encontradas: ${revisionesArticulo.total_revisiones}`);
    revisionesArticulo.revisiones.forEach((rev, index) => {
      console.log(`   ${index + 1}. ${rev.revisor_nombre} - ${rev.recomendacion}`);
    });
    console.log('');

    // Test 10: Filtrar revisiones por recomendaci√≥n
    console.log('10. Filtrando revisiones por recomendaci√≥n "aceptar"...');
    const filtroResponse = await fetch(`${API_URL}/revisiones?recomendacion=aceptar`);
    const revisionesFiltradas = await filtroResponse.json();
    console.log(`‚úÖ Revisiones con recomendaci√≥n "aceptar": ${revisionesFiltradas.revisiones.length}\n`);

    // Test 11: Filtrar revisiones por revisor
    console.log(`11. Filtrando revisiones por revisor ID ${revisorId}...`);
    const revisorFiltroResponse = await fetch(`${API_URL}/revisiones?revisor_id=${revisorId}`);
    const revisionesRevisor = await revisorFiltroResponse.json();
    console.log(`‚úÖ Revisiones del revisor encontradas: ${revisionesRevisor.revisiones.length}\n`);

    // Test 12: Probar paginaci√≥n
    console.log('12. Probando paginaci√≥n (limit=1)...');
    const paginacionResponse = await fetch(`${API_URL}/revisiones?limit=1&page=1`);
    const revisionesPaginadas = await paginacionResponse.json();
    console.log('‚úÖ Paginaci√≥n funcionando:');
    console.log(`   Revisiones en p√°gina: ${revisionesPaginadas.revisiones.length}`);
    console.log(`   Total p√°ginas: ${revisionesPaginadas.pagination.total_pages}`);
    console.log(`   Total revisiones: ${revisionesPaginadas.pagination.total_count}\n`);

    // Test 13: Probar validaciones - revisi√≥n sin campos requeridos
    console.log('13. Probando validaciones (revisi√≥n incompleta)...');
    const revisionIncompleta = { articulo_id: articuloId };
    
    const validacionResponse = await fetch(`${API_URL}/revisiones`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(revisionIncompleta)
    });

    if (validacionResponse.status === 400) {
      const errorValidacion = await validacionResponse.json();
      console.log('‚úÖ Validaci√≥n funcionando:');
      console.log(`   Error: ${errorValidacion.mensaje}\n`);
    }

    // Test 14: Probar validaci√≥n de revisor duplicado
    console.log('14. Probando validaci√≥n de revisor duplicado...');
    const revisionDuplicada = {
      articulo_id: articuloId,
      revisor_id: revisorId,
      observaciones: 'Intento de revisi√≥n duplicada',
      recomendacion: 'revisar'
    };

    const duplicadaResponse = await fetch(`${API_URL}/revisiones`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(revisionDuplicada)
    });

    if (duplicadaResponse.status === 400) {
      const errorDuplicada = await duplicadaResponse.json();
      console.log('‚úÖ Validaci√≥n de duplicado funcionando:');
      console.log(`   Error: ${errorDuplicada.mensaje}\n`);
    }

    // Test 15: Eliminar una revisi√≥n
    console.log(`15. Eliminando revisi√≥n con ID ${revisionId}...`);
    const eliminarResponse = await fetch(`${API_URL}/revisiones/${revisionId}`, {
      method: 'DELETE'
    });

    const eliminarResult = await eliminarResponse.json();
    console.log('‚úÖ Revisi√≥n eliminada:');
    console.log(`   Mensaje: ${eliminarResult.mensaje}\n`);

    // Test 16: Verificar que la revisi√≥n fue eliminada
    console.log(`16. Verificando revisi√≥n eliminada (ID ${revisionId})...`);
    const verificarResponse = await fetch(`${API_URL}/revisiones/${revisionId}`);
    
    if (verificarResponse.status === 404) {
      const errorResponse = await verificarResponse.json();
      console.log('‚úÖ Error 404 esperado:');
      console.log(`   Mensaje: ${errorResponse.mensaje}\n`);
    }

    // Limpiar datos de prueba
    console.log('17. Limpiando datos de prueba...');
    
    // Eliminar revisiones restantes
    const revisionesRestantes = await fetch(`${API_URL}/revisiones/articulo/${articuloId}`);
    const revisionesRestantesData = await revisionesRestantes.json();
    
    for (const revision of revisionesRestantesData.revisiones) {
      await fetch(`${API_URL}/revisiones/${revision.id}`, { method: 'DELETE' });
    }
    
    // Eliminar art√≠culo
    await fetch(`${API_URL}/articulos/${articuloId}`, { method: 'DELETE' });
    
    // Eliminar usuarios
    await fetch(`${API_URL}/usuarios/${autorId}`, { method: 'DELETE' });
    await fetch(`${API_URL}/usuarios/${revisorId}`, { method: 'DELETE' });
    await fetch(`${API_URL}/usuarios/${editorId}`, { method: 'DELETE' });
    
    console.log('‚úÖ Datos de prueba eliminados\n');

    console.log('üéâ ¬°Todas las pruebas de revisiones completadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.message);
    console.log('\nüí° Aseg√∫rate de que:');
    console.log('   - El servidor backend est√© corriendo (npm run dev)');
    console.log('   - La base de datos est√© conectada');
    console.log('   - Las tablas usuarios, articulos y revisiones existan');
  }
}

// Ejecutar las pruebas
testRevisionesAPI();
