// test-revision-documentos.js - Script para probar las APIs de revisi√≥n de documentos
const axios = require('axios');

const API_URL = 'http://localhost:4000/api';

// Funci√≥n para hacer login y obtener token
async function obtenerToken(email = 'test-revisor@editorial.com', contrasena = 'test123') {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, {
      email: email,
      contrasena: contrasena
    });
    
    if (response.data.token) {
      console.log(`‚úÖ Login exitoso como ${response.data.usuario.rol}: ${response.data.usuario.nombre}`);
      return {
        token: response.data.token,
        usuario: response.data.usuario
      };
    } else {
      console.log('‚ùå Error en login: No se recibi√≥ token');
      return null;
    }
  } catch (error) {
    console.log('‚ùå Error en login:', error.response?.data?.mensaje || error.message);
    return null;
  }
}

// Funci√≥n principal de testing
async function probarRevisionDocumentos() {
  console.log('üß™ Probando sistema de revisi√≥n de documentos...\n');
  
  // Obtener token de revisor
  const authData = await obtenerToken();
  if (!authData) {
    console.log('‚ùå No se pudo obtener token de revisor, terminando prueba');
    return;
  }

  const headers = {
    'Authorization': `Bearer ${authData.token}`,
    'Content-Type': 'application/json'
  };

  // Test 1: Obtener revisiones asignadas
  try {
    console.log('üìã Probando obtener revisiones asignadas...');
    const response = await axios.get(`${API_URL}/revision-documentos/mis-revisiones`, { headers });
    
    if (response.data.success) {
      console.log(`‚úÖ Revisiones asignadas obtenidas: ${response.data.data.length} revisiones`);
      response.data.data.forEach((revision, index) => {
        console.log(`   ${index + 1}. "${revision.titulo}" - Estado: ${revision.revision_estado}`);
        console.log(`      - Autor: ${revision.autor_nombre}`);
        console.log(`      - Archivo: ${revision.archivo_nombre || 'Sin archivo'}`);
        console.log(`      - Asignado: ${new Date(revision.fecha_asignacion).toLocaleDateString()}`);
      });
      
      // Guardar primera revisi√≥n para pruebas siguientes
      if (response.data.data.length > 0) {
        global.revisionPrueba = response.data.data[0];
        console.log(`\nüîñ Usando revisi√≥n ID ${global.revisionPrueba.revision_id} para pruebas siguientes`);
      }
    } else {
      console.log('‚ùå Error:', response.data.mensaje);
    }
  } catch (error) {
    console.log('‚ùå Error al obtener revisiones:', error.response?.data?.mensaje || error.message);
  }

  console.log('');

  // Test 2: Obtener detalles de una revisi√≥n espec√≠fica
  if (global.revisionPrueba) {
    try {
      console.log(`üìÑ Probando obtener detalles de revisi√≥n ${global.revisionPrueba.revision_id}...`);
      const response = await axios.get(
        `${API_URL}/revision-documentos/revision/${global.revisionPrueba.revision_id}`, 
        { headers }
      );
      
      if (response.data.success) {
        const revision = response.data.data;
        console.log('‚úÖ Detalles de revisi√≥n obtenidos:');
        console.log(`   - Art√≠culo: "${revision.titulo}"`);
        console.log(`   - Autor: ${revision.autor_nombre} (${revision.autor_email})`);
        console.log(`   - Estado: ${revision.estado}`);
        console.log(`   - Archivo: ${revision.archivo_nombre} (${(revision.archivo_size / 1024).toFixed(1)} KB)`);
        console.log(`   - Observaciones actuales: ${revision.observaciones || 'Ninguna'}`);
        console.log(`   - Calificaci√≥n actual: ${revision.calificacion || 'Sin calificar'}`);
      } else {
        console.log('‚ùå Error:', response.data.mensaje);
      }
    } catch (error) {
      console.log('‚ùå Error al obtener detalles:', error.response?.data?.mensaje || error.message);
    }
  }

  console.log('');

  // Test 3: Guardar progreso de revisi√≥n
  if (global.revisionPrueba) {
    try {
      console.log(`üíæ Probando guardar progreso de revisi√≥n...`);
      const response = await axios.put(
        `${API_URL}/revision-documentos/revision/${global.revisionPrueba.revision_id}/progreso`,
        {
          observaciones: 'Revisi√≥n parcial: El art√≠culo presenta una estructura adecuada. Necesita mejorar la metodolog√≠a en la secci√≥n 3.',
          calificacion: 4
        },
        { headers }
      );
      
      if (response.data.success) {
        console.log('‚úÖ Progreso guardado exitosamente');
      } else {
        console.log('‚ùå Error:', response.data.mensaje);
      }
    } catch (error) {
      console.log('‚ùå Error al guardar progreso:', error.response?.data?.mensaje || error.message);
    }
  }

  console.log('');

  // Test 4: Obtener historial de comentarios
  if (global.revisionPrueba) {
    try {
      console.log(`üí¨ Probando obtener historial de comentarios...`);
      const response = await axios.get(
        `${API_URL}/revision-documentos/revision/${global.revisionPrueba.revision_id}/comentarios`,
        { headers }
      );
      
      if (response.data.success) {
        console.log('‚úÖ Historial de comentarios obtenido:');
        console.log(`   - Comentarios p√∫blicos: ${response.data.data.comentarios_publicos || 'Ninguno'}`);
        console.log(`   - √öltima actualizaci√≥n: ${new Date(response.data.data.ultima_actualizacion).toLocaleString()}`);
      } else {
        console.log('‚ùå Error:', response.data.mensaje);
      }
    } catch (error) {
      console.log('‚ùå Error al obtener historial:', error.response?.data?.mensaje || error.message);
    }
  }

  console.log('');

  // Test 5: Probar descarga de documento (solo verificar endpoint)
  if (global.revisionPrueba && global.revisionPrueba.archivo_nombre) {
    try {
      console.log(`üì• Probando endpoint de descarga de documento...`);
      // Solo hacemos HEAD request para verificar que el endpoint responde
      const response = await axios.head(
        `${API_URL}/revision-documentos/revision/${global.revisionPrueba.revision_id}/documento`,
        { headers }
      );
      
      console.log('‚úÖ Endpoint de descarga disponible');
    } catch (error) {
      if (error.response?.status === 405) {
        console.log('‚ö†Ô∏è  Endpoint de descarga disponible (m√©todo HEAD no soportado)');
      } else {
        console.log('‚ùå Error en endpoint de descarga:', error.response?.data?.mensaje || error.message);
      }
    }
  }

  console.log('\nüéâ Pruebas de revisi√≥n de documentos completadas');
}

// Ejecutar las pruebas
probarRevisionDocumentos().catch(console.error);
