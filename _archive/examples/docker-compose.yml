version: '3.8'

services:
  # Database
  postgres:
    image: postgres:14-alpine
    container_name: editorial-db
    environment:
      POSTGRES_DB: editorialdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/setup-database.sql:/docker-entrypoint-initdb.d/setup-database.sql
    ports:
      - "5432:5432"
    networks:
      - editorial-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: editorial-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/editorialdata
      JWT_SECRET: dev-jwt-secret
      PORT: 4000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - editorial-network
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: editorial-frontend
    environment:
      VITE_API_URL: http://localhost:4000
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - editorial-network
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: editorial-redis
    ports:
      - "6379:6379"
    networks:
      - editorial-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  editorial-network:
    driver: bridge
