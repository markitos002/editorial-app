version: '3.8'

services:
  # Database
  postgres:
    image: postgres:14-alpine
    container_name: editorial-db-prod
    environment:
      POSTGRES_DB: editorialdata
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - editorial-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Main Application (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: editorial-app-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/editorialdata
      JWT_SECRET: ${JWT_SECRET}
      VITE_API_URL: ${API_URL}
    ports:
      - "80:80"
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - editorial-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/var/log/editorial
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for production caching
  redis:
    image: redis:7-alpine
    container_name: editorial-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - editorial-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (if scaling)
  nginx:
    image: nginx:alpine
    container_name: editorial-nginx-prod
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx-prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - editorial-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  editorial-network:
    driver: bridge
